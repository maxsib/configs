/* See LICENSE file for copyright and license details. */
#include "moveresize.c"
#include "movestack.c"
/* appearance */
static const char *fonts[] = {
	"fontawesome:size=10"
};
static const char dmenufont[]       = "monospace:size=10";
static const char normbordercolor[] = "#2f4f4f";
//static const char selbordercolor[]  = "#005577";
static const char selbordercolor[]  = "#147c4c";
static const char normbgcolor[]     = "#222222";
static const char normfgcolor[]     = "#bbbbbb";
static const char selbgcolor[]      = "#244442";
//static const char selfgcolor[]      = "#ffefd5";
//static const char selfgcolor[]      = "#cd9f49";
static const char selfgcolor[]      = "#cdcdc1";
// main1
static const unsigned int baralpha  = 0xd0;
static const unsigned int borderalpha  = OPAQUE;
// main1
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 4;       /* snap pixel */
//static const unsigned int minwsz    = 20;       /* Minimal heigt of a client for smfact */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */

/* tagging */
/*static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };*/
static const char *tags[] = { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
/*	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
*/
   /* class,  instance,   title,   tags mask,   iscentered,  isfloating,  monitor*/
   { "Gimp",       NULL,   NULL,   0,   0,   1,   -1 },
   { "Cr3",        NULL,   NULL,   0,   0,   1,   -1 },
   { "Chromium",   NULL,   NULL,   0,   0,   1,   -1 },
   { "Seamonkey",  NULL,   NULL,   0,   0,   1,   -1 },
   { "Firefox",    NULL,   NULL,   0,   0,   1,   -1 },
   { "Navigator",  NULL,   NULL,   0,   0,   1,   -1 },
   { "Gpicview",   NULL,   NULL,   0,   0,   1,   -1 },
   { "Nitrogen",   NULL,   NULL,   0,   0,   1,   -1 },
   { "smplayer",   NULL,   NULL,   0,   0,   1,   -1 },
//   { "Mplayer",    NULL,   NULL,   0,   0,   1,   -1 },
   { "Audacious",  NULL,   NULL,   0,   0,   1,   -1 },
   { "FBReader",   NULL,   NULL,   0,   0,   1,   -1 },
   { "mpv",        NULL,   NULL,   0,   0,   1,   -1 },
   { "mlterm",     NULL,   NULL,   0,   0,   1,   -1 },

};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
//static const float smfact    = 0.00; /* factor of tiled clients [0.00..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
        { "[M]",      monocle },
        { "[TTT]",    bstack },
//        { "[===]",    bstackhoriz },
//	{ "|M|",      centeredmaster },
//	{ ">M>",      centeredfloatingmaster },
};

void
view_adjacent(const Arg *arg)
{
	int i, curtags;
	int seltag = 0;
	Arg a;

	curtags = selmon->tagset[selmon->seltags];
	for(i = 0; i < LENGTH(tags); i++)
		if(curtags & (1 << i)){
			seltag = i;
			break;
		}

	seltag = (seltag + arg->i) % (int)LENGTH(tags);
	if(seltag < 0)
		seltag += LENGTH(tags);

	a.i = (1 << seltag);
	view(&a);
}

/* key definitions */
#define MODKEY Mod4Mask
#define ALTKEY Mod1Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]  = { "st", NULL };
//#include "zoomswap.c"
/*static const char scratchpadname[] = "scratchpad";
static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "120x34", NULL };
*/
static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
//	{ MODKEY,                       XK_x,      togglescratch,  {.v = scratchpadcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
//	{ MODKEY|ShiftMask              XK_h,      setsmfact,      {.f = -0.05} },
//	{ MODKEY|ShiftMask              XK_l,      setsmfact,      {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_y,      setlayout,      {.v = &layouts[3]} },
//	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[4]} },
//	{ MODKEY,                       XK_o,      setlayout,      {.v = &layouts[5]} },
        { MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	{ MODKEY|ALTKEY,                XK_Left,   view_adjacent,  {.i = -1 } },
	{ MODKEY|ALTKEY,                XK_Right,  view_adjacent,  {.i = +1 } },
	{ MODKEY,                       XK_Up,     moveresize,     {.v = "0x -8y 0w 0h"} },
	{ MODKEY,                       XK_Down,   moveresize,     {.v = "0x 8y 0w 0h"} },
	{ MODKEY,                       XK_Left,   moveresize,     {.v = "-8x 0y 0w 0h"} },
	{ MODKEY,                       XK_Right,  moveresize,     {.v = "8x 0y 0w 0h"} },
	{ MODKEY|ShiftMask,             XK_Up,     moveresize,     {.v = "0x 0y 0w -17h"} },
	{ MODKEY|ShiftMask,             XK_Down,   moveresize,     {.v = "0x 0y 0w 17h"} },
	{ MODKEY|ShiftMask,             XK_Left,   moveresize,     {.v = "0x 0y -17w 0h"} },
	{ MODKEY|ShiftMask,             XK_Right,  moveresize,     {.v = "0x 0y 17w 0h"} },
        { MODKEY|ShiftMask,             XK_j,      movestack,      {.i = +1 } },
        { MODKEY|ShiftMask,             XK_k,      movestack,      {.i = -1 } },
        TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
//	{ ClkWinTitle,          0,              Button1,        focusonclick,   {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

